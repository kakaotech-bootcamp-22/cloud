pipeline {
    agent any
    
    environment {
        AWS_REGION = 'ap-northeast-2'
        IMAGE_TAG = "build-${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: '*/main']], 
                    userRemoteConfigs: [[
                        url: 'https://github.com/kakaotech-bootcamp-22/be', 
                        credentialsId: 'github-token'
                    ]]
                ])
            }
        }
        
        stage('Build & Test') {
            steps {
                sh './gradlew clean build'
            }
        }
        
        stage('Build & Push to ECR') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding', 
                        credentialsId: 'hedther',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        def AWS_ACCOUNT_ID = sh(
                            script: 'aws sts get-caller-identity --query Account --output text',
                            returnStdout: true
                        ).trim()
                        
                        env.ECR_REPOSITORY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/backend-server"
                        
                        sh """
                            docker build -t ${env.ECR_REPOSITORY}:${IMAGE_TAG} .
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${env.ECR_REPOSITORY}
                            docker push ${env.ECR_REPOSITORY}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                script {
                    withCredentials([
                        file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG'),
                        string(credentialsId: 'db-password', variable: 'DB_PASSWORD'),
                        [$class: 'AmazonWebServicesCredentialsBinding',
                         credentialsId: 'hedther',
                         accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                         secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
                    ]) {
                        sh """
                            sed -i 's|image: .*|image: ${env.ECR_REPOSITORY}:${IMAGE_TAG}|' k8s/deployment.yaml
                            kubectl apply -f k8s/deployment.yaml
                            kubectl apply -f k8s/service.yaml
                        """
                        
                        // 배포된 서비스의 외부 IP 또는 도메인 출력
                        def serviceUrl = sh(
                            script: "kubectl get svc my-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'",
                            returnStdout: true
                        ).trim()
                        echo "Application is accessible at: http://${serviceUrl}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}